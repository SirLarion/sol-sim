

### Read the ephemeris data generated by JPL:s HORIZONS system ###

## Imports ##
import re
import os
import sys
import timeit
import numpy as np
import matplotlib.pyplot as plt

## Init lists ##
colors   = ['#ff0000', '#00ff00', '#0000ff', '#ffff00', '#00ffff', '#ff00ff']
bodylist = ['sun', 'mercury', 'venus', 'earth', 'mars', 'jupiter']
body_ID  = ['10', '199', '299', '399', '499', '599']

## Init dictionaries ##
bodies = dict(zip(bodylist, body_ID))
cdict  = dict(zip(bodylist, colors))
pos    = dict(zip(bodylist, [([], [], []) for _ in range(0, len(bodylist))])) 

def read_to_file():
    for b in bodies:        # Run the vec_tbl Expect script for each body to get data
        filename = 'pts/%s.txt' % b
        print('Reading ephemeris for %s...' % b)
        stream = os.popen('./vec_tbl %s %s' % (bodies[b], filename))
        out = stream.read() # Check for error message
        print(out)
        if(len(out)> 0):    # Running vec_tbl successfully prints out an empty line
            continue
        print('Success!')

def read_data():
    for b in bodies:        # Parse the text files in pts/ and store positions into pos arrays
        filename = 'pts/%s.txt' % b 
        try:
            f = open(filename, 'r')
            line = f.readline()
            while('$$SOE' not in line):
                line = f.readline()
            f.readline()
            while('$$EOE' not in line):
                line = f.readline()
                array = line.split('=')[1:]
                pos[b][0].append(float(array[0].strip('XYZ ')))
                pos[b][1].append(float(array[1].strip('XYZ ')))
                pos[b][2].append(float(array[2].strip('XYZ ')))
                f.readline()
                f.readline()
                line = f.readline()
        except:
            continue        # Jump to next file if current one wasn't found

def plot_data():            
    fig = plt.figure()

    axes = fig.add_subplot(111, projection='3d')
    axes.xaxis.set_ticks([])
    axes.yaxis.set_ticks([])
    axes.zaxis.set_ticks([])
    axes.xaxis.set_ticklabels([])
    axes.yaxis.set_ticklabels([])
    axes.zaxis.set_ticklabels([])

    for p in pos:           # Plot the positions of the bodies in 3 dimensions
        x = np.array(pos[p][0])
        y = np.array(pos[p][1])
        z = np.array(pos[p][2])
        axes.plot(x, y, z, cdict[p])

    plt.show()

def main():
    t0 = timeit.default_timer()
    if(len(sys.argv) > 1 and '--refresh' in sys.argv[1]):
        read_to_file()
    read_data()
    t = timeit.default_timer()
    print('Time taken: %.3fs'  % (t-t0))
    plot_data()

main()
